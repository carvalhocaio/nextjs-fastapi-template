// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type Client,
  type TDataShape,
  urlSearchParamsBodySerializer,
} from "./client";
import type {
  AuthJwtLoginData,
  AuthJwtLoginResponses,
  AuthJwtLoginErrors,
  AuthJwtLogoutData,
  AuthJwtLogoutResponses,
  AuthJwtLogoutErrors,
  RegisterRegisterData,
  RegisterRegisterResponses,
  RegisterRegisterErrors,
  ResetForgotPasswordData,
  ResetForgotPasswordResponses,
  ResetForgotPasswordErrors,
  ResetResetPasswordData,
  ResetResetPasswordResponses,
  ResetResetPasswordErrors,
  VerifyRequestTokenData,
  VerifyRequestTokenResponses,
  VerifyRequestTokenErrors,
  VerifyVerifyData,
  VerifyVerifyResponses,
  VerifyVerifyErrors,
  UsersCurrentUserData,
  UsersCurrentUserResponses,
  UsersCurrentUserErrors,
  UsersPatchCurrentUserData,
  UsersPatchCurrentUserResponses,
  UsersPatchCurrentUserErrors,
  UsersDeleteUserData,
  UsersDeleteUserResponses,
  UsersDeleteUserErrors,
  UsersUserData,
  UsersUserResponses,
  UsersUserErrors,
  UsersPatchUserData,
  UsersPatchUserResponses,
  UsersPatchUserErrors,
  ReadItemData,
  ReadItemResponses,
  ReadItemErrors,
  CreateItemData,
  CreateItemResponses,
  CreateItemErrors,
  DeleteItemData,
  DeleteItemResponses,
  DeleteItemErrors,
} from "./types.gen";
import { client } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Auth:Jwt.Login
 */
export const authJwtLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthJwtLoginData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    AuthJwtLoginResponses,
    AuthJwtLoginErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    responseType: "json",
    url: "/auth/jwt/login",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options.headers,
    },
  });
};

/**
 * Auth:Jwt.Logout
 */
export const authJwtLogout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthJwtLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthJwtLogoutResponses,
    AuthJwtLogoutErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/jwt/logout",
    ...options,
  });
};

/**
 * Register:Register
 */
export const registerRegister = <ThrowOnError extends boolean = false>(
  options: Options<RegisterRegisterData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RegisterRegisterResponses,
    RegisterRegisterErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/auth/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Reset:Forgot Password
 */
export const resetForgotPassword = <ThrowOnError extends boolean = false>(
  options: Options<ResetForgotPasswordData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    ResetForgotPasswordResponses,
    ResetForgotPasswordErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/auth/forgot-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Reset:Reset Password
 */
export const resetResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<ResetResetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    ResetResetPasswordResponses,
    ResetResetPasswordErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/auth/reset-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify:Request-Token
 */
export const verifyRequestToken = <ThrowOnError extends boolean = false>(
  options: Options<VerifyRequestTokenData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    VerifyRequestTokenResponses,
    VerifyRequestTokenErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/auth/request-verify-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify:Verify
 */
export const verifyVerify = <ThrowOnError extends boolean = false>(
  options: Options<VerifyVerifyData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    VerifyVerifyResponses,
    VerifyVerifyErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/auth/verify",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Users:Current User
 */
export const usersCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<UsersCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersCurrentUserResponses,
    UsersCurrentUserErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/users/me",
    ...options,
  });
};

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersPatchCurrentUserData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<
    UsersPatchCurrentUserResponses,
    UsersPatchCurrentUserErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/users/me",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Users:Delete User
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    UsersDeleteUserResponses,
    UsersDeleteUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/users/{id}",
    ...options,
  });
};

/**
 * Users:User
 */
export const usersUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersUserData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    UsersUserResponses,
    UsersUserErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/users/{id}",
    ...options,
  });
};

/**
 * Users:Patch User
 */
export const usersPatchUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersPatchUserData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<
    UsersPatchUserResponses,
    UsersPatchUserErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/users/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Read Item
 */
export const readItem = <ThrowOnError extends boolean = false>(
  options?: Options<ReadItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadItemResponses,
    ReadItemErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/items/",
    ...options,
  });
};

/**
 * Create Item
 */
export const createItem = <ThrowOnError extends boolean = false>(
  options: Options<CreateItemData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateItemResponses,
    CreateItemErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/items/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Item
 */
export const deleteItem = <ThrowOnError extends boolean = false>(
  options: Options<DeleteItemData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteItemResponses,
    DeleteItemErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/items/{item_id}",
    ...options,
  });
};
